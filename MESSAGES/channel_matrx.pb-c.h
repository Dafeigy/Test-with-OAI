/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: channel_matrx.proto */

#ifndef PROTOBUF_C_channel_5fmatrx_2eproto__INCLUDED
#define PROTOBUF_C_channel_5fmatrx_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _NRMatrix__UESRSPACK NRMatrix__UESRSPACK;
typedef struct _NRMatrix__NRSRSPACK NRMatrix__NRSRSPACK;
typedef struct _NRMatrix__NRSRSINFO NRMatrix__NRSRSINFO;
typedef struct _NRMatrix__RESULT NRMatrix__RESULT;


/* --- enums --- */


/* --- messages --- */

struct  _NRMatrix__UESRSPACK
{
  ProtobufCMessage base;
  size_t n_ue_info;
  NRMatrix__NRSRSPACK **ue_info;
};
#define NRMATRIX__UE__SRS__PACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrmatrix__ue__srs__pack__descriptor) \
    , 0,NULL }


struct  _NRMatrix__NRSRSPACK
{
  ProtobufCMessage base;
  int32_t ue_id;
  size_t n_matrix;
  NRMatrix__NRSRSINFO **matrix;
};
#define NRMATRIX__NR__SRS__PACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrmatrix__nr__srs__pack__descriptor) \
    , 0, 0,NULL }


struct  _NRMatrix__NRSRSINFO
{
  ProtobufCMessage base;
  size_t n_prb_item;
  NRMatrix__RESULT **prb_item;
};
#define NRMATRIX__NR__SRS__INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrmatrix__nr__srs__info__descriptor) \
    , 0,NULL }


/*
 * RESULT存放的其实是和信道相关的复数结构，由于以上指标都是复数形式所以就统一命名为RESULT
 */
struct  _NRMatrix__RESULT
{
  ProtobufCMessage base;
  int32_t image;
  int32_t real;
};
#define NRMATRIX__RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&nrmatrix__result__descriptor) \
    , 0, 0 }


/* NRMatrix__UESRSPACK methods */
void   nrmatrix__ue__srs__pack__init
                     (NRMatrix__UESRSPACK         *message);
size_t nrmatrix__ue__srs__pack__get_packed_size
                     (const NRMatrix__UESRSPACK   *message);
size_t nrmatrix__ue__srs__pack__pack
                     (const NRMatrix__UESRSPACK   *message,
                      uint8_t             *out);
size_t nrmatrix__ue__srs__pack__pack_to_buffer
                     (const NRMatrix__UESRSPACK   *message,
                      ProtobufCBuffer     *buffer);
NRMatrix__UESRSPACK *
       nrmatrix__ue__srs__pack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrmatrix__ue__srs__pack__free_unpacked
                     (NRMatrix__UESRSPACK *message,
                      ProtobufCAllocator *allocator);
/* NRMatrix__NRSRSPACK methods */
void   nrmatrix__nr__srs__pack__init
                     (NRMatrix__NRSRSPACK         *message);
size_t nrmatrix__nr__srs__pack__get_packed_size
                     (const NRMatrix__NRSRSPACK   *message);
size_t nrmatrix__nr__srs__pack__pack
                     (const NRMatrix__NRSRSPACK   *message,
                      uint8_t             *out);
size_t nrmatrix__nr__srs__pack__pack_to_buffer
                     (const NRMatrix__NRSRSPACK   *message,
                      ProtobufCBuffer     *buffer);
NRMatrix__NRSRSPACK *
       nrmatrix__nr__srs__pack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrmatrix__nr__srs__pack__free_unpacked
                     (NRMatrix__NRSRSPACK *message,
                      ProtobufCAllocator *allocator);
/* NRMatrix__NRSRSINFO methods */
void   nrmatrix__nr__srs__info__init
                     (NRMatrix__NRSRSINFO         *message);
size_t nrmatrix__nr__srs__info__get_packed_size
                     (const NRMatrix__NRSRSINFO   *message);
size_t nrmatrix__nr__srs__info__pack
                     (const NRMatrix__NRSRSINFO   *message,
                      uint8_t             *out);
size_t nrmatrix__nr__srs__info__pack_to_buffer
                     (const NRMatrix__NRSRSINFO   *message,
                      ProtobufCBuffer     *buffer);
NRMatrix__NRSRSINFO *
       nrmatrix__nr__srs__info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrmatrix__nr__srs__info__free_unpacked
                     (NRMatrix__NRSRSINFO *message,
                      ProtobufCAllocator *allocator);
/* NRMatrix__RESULT methods */
void   nrmatrix__result__init
                     (NRMatrix__RESULT         *message);
size_t nrmatrix__result__get_packed_size
                     (const NRMatrix__RESULT   *message);
size_t nrmatrix__result__pack
                     (const NRMatrix__RESULT   *message,
                      uint8_t             *out);
size_t nrmatrix__result__pack_to_buffer
                     (const NRMatrix__RESULT   *message,
                      ProtobufCBuffer     *buffer);
NRMatrix__RESULT *
       nrmatrix__result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   nrmatrix__result__free_unpacked
                     (NRMatrix__RESULT *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*NRMatrix__UESRSPACK_Closure)
                 (const NRMatrix__UESRSPACK *message,
                  void *closure_data);
typedef void (*NRMatrix__NRSRSPACK_Closure)
                 (const NRMatrix__NRSRSPACK *message,
                  void *closure_data);
typedef void (*NRMatrix__NRSRSINFO_Closure)
                 (const NRMatrix__NRSRSINFO *message,
                  void *closure_data);
typedef void (*NRMatrix__RESULT_Closure)
                 (const NRMatrix__RESULT *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor nrmatrix__ue__srs__pack__descriptor;
extern const ProtobufCMessageDescriptor nrmatrix__nr__srs__pack__descriptor;
extern const ProtobufCMessageDescriptor nrmatrix__nr__srs__info__descriptor;
extern const ProtobufCMessageDescriptor nrmatrix__result__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_channel_5fmatrx_2eproto__INCLUDED */
